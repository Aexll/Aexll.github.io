{"version":3,"sources":["App.js","index.js"],"names":["client","Binance","play","App","useState","pairName","nb_click","advanceClick","info_restart","resetChart","chart","useRef","chartContainerRef","candleSeries","useEffect","current","createChart","width","window","innerWidth","height","innerHeight","layout","backgroundColor","textColor","grid","vertLines","color","horzLines","crosshair","mode","CrosshairMode","Normal","priceScale","borderColor","timeScale","watermark","text","fontSize","visible","console","log","addCandlestickSeries","upColor","downColor","borderDownColor","borderUpColor","wickDownColor","wickUpColor","cleaner","thedata","setData","fetchPrevAndSubscribe","now","Date","getTime","Math","floor","random","candles","symbol","interval","limit","endTime","prevData","datas","Array","isArray","map","data","time","openTime","startTime","open","high","low","close","slice","setInterval","className","class","id","ref","onClick","viewBox","d","xmlns","fill","rootElement","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.07582adb.chunk.js","sourcesContent":["import \"./styles.css\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport Binance from \"binance-api-node\";\r\nimport { createChart, CrosshairMode } from 'lightweight-charts';\r\n\r\nconst client = Binance();\r\nvar play = false;                  //  set your counter to 1\r\nvar speed = 100;\r\nfunction switchplay() {\r\n  if(play)\r\n    play=false\r\n  else\r\n    play=true\r\n}\r\nfunction setSpeed(event) {\r\n  speed=event.target.value\r\n  console.log(\"speed\",speed)\r\n}\r\n\r\n\r\nexport default function App() {\r\n  const [pairName, setPairName] = useState(\"BTCUSDT\");\r\n  const [nb_click, advanceClick] = useState(0);\r\n  const [info_restart, resetChart] = useState(0);\r\n\r\n  // chart creation\r\n  // full example (without realtime data): https://codesandbox.io/s/9inkb?file=/src/index.js\r\n  const chart = useRef();\r\n  const chartContainerRef = useRef();\r\n  const candleSeries = useRef();\r\n  useEffect(() => {\r\n    if (chart.current)\r\n      return\r\n\r\n    chart.current = createChart(chartContainerRef.current, {\r\n      width: window.innerWidth,// chartContainerRef.current.clientWidth,\r\n      height: window.innerHeight,// chartContainerRef.current.clientHeight,\r\n      layout: {\r\n        backgroundColor: '#253248',\r\n        textColor: 'rgba(255, 255, 255, 0.9)',\r\n      },\r\n      grid: {\r\n        vertLines: {\r\n          color: '#334158',\r\n        },\r\n        horzLines: {\r\n          color: '#334158',\r\n        },\r\n      },\r\n      crosshair: {\r\n        mode: CrosshairMode.Normal,\r\n      },\r\n      priceScale: {\r\n        borderColor: '#485c7b',\r\n      },\r\n      timeScale: {\r\n        borderColor: '#485c7b',\r\n      },\r\n      watermark: {\r\n        text: \"BTCUSDT\",\r\n        fontSize: 142,\r\n        color: \"rgba(256, 256, 256, 0.1)\",\r\n        visible: true\r\n      }\r\n    });\r\n\r\n    console.log(chart.current);\r\n\r\n    candleSeries.current = chart.current.addCandlestickSeries({\r\n      upColor: '#4bffb5',\r\n      downColor: '#ff4976',\r\n      borderDownColor: '#ff4976',\r\n      borderUpColor: '#4bffb5',\r\n      wickDownColor: '#838ca1',\r\n      wickUpColor: '#838ca1',\r\n    });\r\n\r\n  }, [])\r\n\r\n  const formatOHLC = datas => {\r\n    console.log(\"formatohlc \", datas)\r\n    if (!Array.isArray(datas))\r\n      datas = [datas]\r\n    return datas.map(data => ({\r\n      time: data.openTime || data.startTime,\r\n      open: data.open,\r\n      high: data.high,\r\n      low: data.low,\r\n      close: data.close\r\n    }))\r\n  }\r\n\r\n  // binance data subscription\r\n  // cleaner is a function to unsubscribe a previous subscription\r\n\r\n  \r\n  const cleaner = useRef();\r\n  var thedata = useRef();\r\n  useEffect(() => {\r\n    if (cleaner.current) {\r\n      // unsubscribe from previous subscription\r\n      console.log(\"cleaned previous subscriber: \", cleaner.current)\r\n      cleaner.current()\r\n      // clear chart candles\r\n      candleSeries.current.setData([]);\r\n    }\r\n\r\n    // // subscribe to websocket for the future price update\r\n    // const clean = client.ws.candles(pairName, \"1h\", (res) => {\r\n    //   console.log(\"res: \", res)\r\n    //   const candleData = {\r\n    //     time: res.startTime,\r\n    //     open: res.open,\r\n    //     high: res.high,\r\n    //     low: res.low,\r\n    //     close: res.close\r\n    //   }\r\n    //   console.log(candleData.time, candleData.close)\r\n    //   candleSeries.current.update(candleData)\r\n    // });\r\n    // cleaner.current = clean;\r\n    // console.log(\"added new candles subscription for \", pairName)\r\n\r\n\r\n    const fetchPrevAndSubscribe = async () => {\r\n      // before subscribe to websocket, should prefill the chart with existing history, this can be fetched with normal REST request\r\n      // SHOULD DO THIS BEFORE SUBSCRIBE, HOWEVER MOVING SUBSCRIBE TO AFTER THIS BLOCK OF CODE WILL CAUSE THE SUBSCRIPTION GOES ON FOREVER\r\n      // REACT BUG?\r\n      // const now = Date.now()\r\n      const now = new Date('2022-06-01T00:00:00').getTime() + Math.floor(Math.random()*60000*60*24*90)// + nb_click*60000\r\n      // const now = new Date('September 10, 2022 23:15:30')\r\n\r\n      let prevData = await client.candles({\r\n        symbol: pairName,\r\n        interval: \"1m\",\r\n        limit: 10000,\r\n        endTime: now\r\n      })\r\n      prevData = formatOHLC(prevData)\r\n      console.log(\"prev data: \", prevData)\r\n      // candleSeries.current.setData(prevData);\r\n      thedata.current = prevData\r\n      candleSeries.current.setData(thedata.current.slice(0,500+nb_click))\r\n      \r\n    }\r\n\r\n    fetchPrevAndSubscribe()\r\n  }, [pairName,info_restart])\r\n\r\n  useEffect(() => {\r\n    if(! candleSeries.current)\r\n      return\r\n    if(! thedata.current)\r\n      return\r\n    candleSeries.current.setData(thedata.current.slice(0,500+nb_click))\r\n    console.log(\"datatest\",thedata.current)\r\n\r\n\r\n  },[nb_click])\r\n  \r\n\r\n\r\n\r\n\r\n\r\n  setInterval(() => {\r\n    if(play)\r\n      advanceClick(nb_click+1)\r\n  }, 50);\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n\r\n      <div class=\"core\" id=\"overlay\">\r\n        <div class=\"graph\" ref={chartContainerRef} />\r\n        <h1 class=\"title\">Backtest for chads</h1>\r\n        <button class=\"button-9\" onClick={() => switchplay()}>\r\n          <svg class=\"svg-icon\" viewBox=\"0 0 20 20\">\r\n\t\t\t\t\t\t\t<path d=\"M12.522,10.4l-3.559,3.562c-0.172,0.173-0.451,0.176-0.625,0c-0.173-0.173-0.173-0.451,0-0.624l3.248-3.25L8.161,6.662c-0.173-0.173-0.173-0.452,0-0.624c0.172-0.175,0.451-0.175,0.624,0l3.738,3.736C12.695,9.947,12.695,10.228,12.522,10.4 M18.406,10c0,4.644-3.764,8.406-8.406,8.406c-4.644,0-8.406-3.763-8.406-8.406S5.356,1.594,10,1.594C14.643,1.594,18.406,5.356,18.406,10M17.521,10c0-4.148-3.374-7.521-7.521-7.521c-4.148,0-7.521,3.374-7.521,7.521c0,4.147,3.374,7.521,7.521,7.521C14.147,17.521,17.521,14.147,17.521,10\"></path>\r\n\t\t\t\t\t</svg>\r\n        </button>\r\n        <button class=\"button-8\" onClick={() => resetChart(info_restart+1)}>\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-recycle\" viewBox=\"0 0 16 16\">\r\n            <path d=\"M9.302 1.256a1.5 1.5 0 0 0-2.604 0l-1.704 2.98a.5.5 0 0 0 .869.497l1.703-2.981a.5.5 0 0 1 .868 0l2.54 4.444-1.256-.337a.5.5 0 1 0-.26.966l2.415.647a.5.5 0 0 0 .613-.353l.647-2.415a.5.5 0 1 0-.966-.259l-.333 1.242-2.532-4.431zM2.973 7.773l-1.255.337a.5.5 0 1 1-.26-.966l2.416-.647a.5.5 0 0 1 .612.353l.647 2.415a.5.5 0 0 1-.966.259l-.333-1.242-2.545 4.454a.5.5 0 0 0 .434.748H5a.5.5 0 0 1 0 1H1.723A1.5 1.5 0 0 1 .421 12.24l2.552-4.467zm10.89 1.463a.5.5 0 1 0-.868.496l1.716 3.004a.5.5 0 0 1-.434.748h-5.57l.647-.646a.5.5 0 1 0-.708-.707l-1.5 1.5a.498.498 0 0 0 0 .707l1.5 1.5a.5.5 0 1 0 .708-.707l-.647-.647h5.57a1.5 1.5 0 0 0 1.302-2.244l-1.716-3.004z\"/>\r\n          </svg>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n      // \r\n      // {pairName} \r\n      // <div ref={chartContainerRef} style={{ width: \"100%\", height: \"500px\"}} />\r\n      // <span>{speed}</span>\r\n      // <input type=\"range\" onInput={setSpeed}></input>\r\n      // <button onClick={() => advanceClick(nb_click+0)}>+1</button>\r\n      // <div>Current selection: {pairName}</div>\r\n      // <span onClick={() => setPairName(\"BTCUSDT\")}>BTCUSDT, </span>\r\n      // <span onClick={() => setPairName(\"ETHUSDT\")}>ETHUSDT, </span>\r\n","import { StrictMode } from \"react\";\r\nimport { createRoot } from \"react-dom/client\";\r\n\r\nimport App from \"./App\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nconst root = createRoot(rootElement);\r\n\r\nroot.render(\r\n  <StrictMode>\r\n    <App />\r\n  </StrictMode>\r\n);\r\n"],"sourceRoot":""}