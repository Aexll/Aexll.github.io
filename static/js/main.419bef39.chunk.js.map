{"version":3,"sources":["App.js","index.js"],"names":["client","Binance","App","useState","pairName","setPairName","chart","useRef","chartContainerRef","candleSeries","useEffect","current","createChart","width","clientWidth","height","clientHeight","layout","backgroundColor","textColor","grid","vertLines","color","horzLines","crosshair","mode","CrosshairMode","Normal","priceScale","borderColor","timeScale","console","log","addCandlestickSeries","upColor","downColor","borderDownColor","borderUpColor","wickDownColor","wickUpColor","cleaner","setData","clean","ws","candles","res","candleData","time","startTime","open","high","low","close","update","fetchPrevAndSubscribe","now","Date","symbol","interval","limit","endTime","prevData","datas","Array","isArray","map","data","openTime","className","onClick","ref","style","rootElement","document","getElementById","createRoot","render"],"mappings":"ugBAKMA,EAASC,MAEA,SAASC,IACtB,MAAgCC,mBAAS,WAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAIMC,EAAQC,mBACRC,EAAoBD,mBACpBE,EAAeF,mBACrBG,qBAAU,WACJJ,EAAMK,UAGVL,EAAMK,QAAUC,YAAYJ,EAAkBG,QAAS,CACrDE,MAAOL,EAAkBG,QAAQG,YACjCC,OAAQP,EAAkBG,QAAQK,aAClCC,OAAQ,CACNC,gBAAiB,UACjBC,UAAW,4BAEbC,KAAM,CACJC,UAAW,CACTC,MAAO,WAETC,UAAW,CACTD,MAAO,YAGXE,UAAW,CACTC,KAAMC,IAAcC,QAEtBC,WAAY,CACVC,YAAa,WAEfC,UAAW,CACTD,YAAa,aAIjBE,QAAQC,IAAI1B,EAAMK,SAElBF,EAAaE,QAAUL,EAAMK,QAAQsB,qBAAqB,CACxDC,QAAS,UACTC,UAAW,UACXC,gBAAiB,UACjBC,cAAe,UACfC,cAAe,UACfC,YAAa,YAGhB,GAAE,IAEH,IAgBMC,EAAUjC,mBAgDhB,OA/CAG,qBAAU,WACJ8B,EAAQ7B,UAEVoB,QAAQC,IAAI,gCAAiCQ,EAAQ7B,SACrD6B,EAAQ7B,UAERF,EAAaE,QAAQ8B,QAAQ,KAI/B,IAAMC,EAAQ1C,EAAO2C,GAAGC,QAAQxC,EAAU,MAAM,SAACyC,GAC/Cd,QAAQC,IAAI,QAASa,GACrB,IAAMC,EAAa,CACjBC,KAAMF,EAAIG,UACVC,KAAMJ,EAAII,KACVC,KAAML,EAAIK,KACVC,IAAKN,EAAIM,IACTC,MAAOP,EAAIO,OAEbrB,QAAQC,IAAIc,EAAWC,KAAMD,EAAWM,OACxC3C,EAAaE,QAAQ0C,OAAOP,EAC7B,IACDN,EAAQ7B,QAAU+B,EAClBX,QAAQC,IAAI,sCAAuC5B,GAEnD,IAAMkD,EAAqB,iDAAG,uGAItBC,EAAMC,KAAKD,MAJW,SAKPvD,EAAO4C,QAAQ,CAClCa,OAAQrD,EACRsD,SAAU,KACVC,MAAO,IACPC,QAASL,IATiB,OAKxBM,EALwB,OA1CbC,EAqDOD,EApDxB9B,QAAQC,IAAI,cAAe8B,GACtBC,MAAMC,QAAQF,KACjBA,EAAQ,CAACA,IAkDTD,EAjDKC,EAAMG,KAAI,SAAAC,GAAI,MAAK,CACxBnB,KAAMmB,EAAKC,UAAYD,EAAKlB,UAC5BC,KAAMiB,EAAKjB,KACXC,KAAMgB,EAAKhB,KACXC,IAAKe,EAAKf,IACVC,MAAOc,EAAKd,MALO,IAkDnBrB,QAAQC,IAAI,cAAe6B,GAC3BpD,EAAaE,QAAQ8B,QAAQoB,GAbD,iCA1Cb,IAAAC,CA0Ca,UAAH,qDAkB3BR,GACD,GAAE,CAAClD,IAIF,sBAAKgE,UAAU,MAAf,UACE,sDAAyBhE,KACzB,sBAAMiE,QAAS,kBAAMhE,EAAY,UAAlB,EAAf,uBACA,sBAAMgE,QAAS,kBAAMhE,EAAY,UAAlB,EAAf,uBAEA,mDACA,mDAAsBD,EAAtB,QACA,qBAAKkE,IAAK9D,EAAmB+D,MAAO,CAAE1D,MAAO,QAASE,OAAQ,aAGnE,CChID,IAAMyD,EAAcC,SAASC,eAAe,QAC/BC,qBAAWH,GAEnBI,OACH,cAAC,aAAD,UACE,cAAC1E,EAAD,M","file":"static/js/main.419bef39.chunk.js","sourcesContent":["import \"./styles.css\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport Binance from \"binance-api-node\";\r\nimport { createChart, CrosshairMode } from 'lightweight-charts';\r\n\r\nconst client = Binance();\r\n\r\nexport default function App() {\r\n  const [pairName, setPairName] = useState(\"BTCUSDT\");\r\n\r\n  // chart creation\r\n  // full example (without realtime data): https://codesandbox.io/s/9inkb?file=/src/index.js\r\n  const chart = useRef();\r\n  const chartContainerRef = useRef();\r\n  const candleSeries = useRef();\r\n  useEffect(() => {\r\n    if (chart.current)\r\n      return\r\n\r\n    chart.current = createChart(chartContainerRef.current, {\r\n      width: chartContainerRef.current.clientWidth,\r\n      height: chartContainerRef.current.clientHeight,\r\n      layout: {\r\n        backgroundColor: '#253248',\r\n        textColor: 'rgba(255, 255, 255, 0.9)',\r\n      },\r\n      grid: {\r\n        vertLines: {\r\n          color: '#334158',\r\n        },\r\n        horzLines: {\r\n          color: '#334158',\r\n        },\r\n      },\r\n      crosshair: {\r\n        mode: CrosshairMode.Normal,\r\n      },\r\n      priceScale: {\r\n        borderColor: '#485c7b',\r\n      },\r\n      timeScale: {\r\n        borderColor: '#485c7b',\r\n      },\r\n    });\r\n\r\n    console.log(chart.current);\r\n\r\n    candleSeries.current = chart.current.addCandlestickSeries({\r\n      upColor: '#4bffb5',\r\n      downColor: '#ff4976',\r\n      borderDownColor: '#ff4976',\r\n      borderUpColor: '#4bffb5',\r\n      wickDownColor: '#838ca1',\r\n      wickUpColor: '#838ca1',\r\n    });\r\n\r\n  }, [])\r\n\r\n  const formatOHLC = datas => {\r\n    console.log(\"formatohlc \", datas)\r\n    if (!Array.isArray(datas))\r\n      datas = [datas]\r\n    return datas.map(data => ({\r\n      time: data.openTime || data.startTime,\r\n      open: data.open,\r\n      high: data.high,\r\n      low: data.low,\r\n      close: data.close\r\n    }))\r\n  }\r\n\r\n  // binance data subscription\r\n  // cleaner is a function to unsubscribe a previous subscription\r\n\r\n  const cleaner = useRef()\r\n  useEffect(() => {\r\n    if (cleaner.current) {\r\n      // unsubscribe from previous subscription\r\n      console.log(\"cleaned previous subscriber: \", cleaner.current)\r\n      cleaner.current()\r\n      // clear chart candles\r\n      candleSeries.current.setData([]);\r\n    }\r\n\r\n    // subscribe to websocket for the future price update\r\n    const clean = client.ws.candles(pairName, \"1m\", (res) => {\r\n      console.log(\"res: \", res)\r\n      const candleData = {\r\n        time: res.startTime,\r\n        open: res.open,\r\n        high: res.high,\r\n        low: res.low,\r\n        close: res.close\r\n      }\r\n      console.log(candleData.time, candleData.close)\r\n      candleSeries.current.update(candleData)\r\n    });\r\n    cleaner.current = clean;\r\n    console.log(\"added new candles subscription for \", pairName)\r\n\r\n    const fetchPrevAndSubscribe = async () => {\r\n      // before subscribe to websocket, should prefill the chart with existing history, this can be fetched with normal REST request\r\n      // SHOULD DO THIS BEFORE SUBSCRIBE, HOWEVER MOVING SUBSCRIBE TO AFTER THIS BLOCK OF CODE WILL CAUSE THE SUBSCRIPTION GOES ON FOREVER\r\n      // REACT BUG?\r\n      const now = Date.now()\r\n      let prevData = await client.candles({\r\n        symbol: pairName,\r\n        interval: \"1m\",\r\n        limit: 1000,\r\n        endTime: now\r\n      })\r\n      prevData = formatOHLC(prevData)\r\n      console.log(\"prev data: \", prevData)\r\n      candleSeries.current.setData(prevData);\r\n  \r\n      \r\n    }\r\n\r\n    fetchPrevAndSubscribe()\r\n  }, [pairName])\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div>Current selection: {pairName}</div>\r\n      <span onClick={() => setPairName(\"BTCUSDT\")}>BTCUSDT, </span>\r\n      <span onClick={() => setPairName(\"ETHUSDT\")}>ETHUSDT, </span>\r\n\r\n      <h1>Hello CodeSandbox</h1>\r\n      <h2>Latest price for {pairName}: {}</h2>\r\n      <div ref={chartContainerRef} style={{ width: \"300px\", height: \"300px\"}} />\r\n    </div>\r\n  );\r\n}\r\n","import { StrictMode } from \"react\";\r\nimport { createRoot } from \"react-dom/client\";\r\n\r\nimport App from \"./App\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nconst root = createRoot(rootElement);\r\n\r\nroot.render(\r\n  <StrictMode>\r\n    <App />\r\n  </StrictMode>\r\n);\r\n"],"sourceRoot":""}